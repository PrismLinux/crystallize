stages:
  - build
  - release

variables:
  GIT_STRATEGY: clone
  GIT_DEPTH: 0
  PACKAGE_IMAGE: registry.gitlab.com/crystalnetwork-studio/dev-tooling/docker/pkgbuild-archlinux:latest
  ARTIFACTS_DIR: "artifacts"
  CCACHE_DIR: "/home/builder/.ccache"

# Template for common package job configuration
.package_job_template: &package_job_template
  image:
    name: $PACKAGE_IMAGE
    entrypoint: [""]
  before_script:
    - mkdir -p $ARTIFACTS_DIR
    - cd $CI_PROJECT_DIR
  cache:
    key: ccache-$CI_COMMIT_REF_SLUG
    paths:
      - .ccache/
    policy: pull-push
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - $ARTIFACTS_DIR/

build_package:
  <<: *package_job_template
  stage: build
  rules:
    - if: $CI_COMMIT_TAG

  script:
    # System updates must run as root
    - sudo pacman -Sy --needed --noconfirm

    - BUILD_DIR="/home/builder/build"
    - BUILD_ARTIFACTS_DIR="/home/builder/artifacts"

    - echo "Setting up directories for builder user..."
    - mkdir -p "$BUILD_DIR" "$BUILD_ARTIFACTS_DIR" "$CCACHE_DIR"
    - chown -R 1000:1000 "$BUILD_DIR" "$BUILD_ARTIFACTS_DIR" "$CCACHE_DIR"

    - echo "Copying project source to build directory..."
    - cp -r . "$BUILD_DIR/"
    - chown -R 1000:1000 "$BUILD_DIR" # Ensure copied files are owned by builder
    
    - ln -sf "$CI_PROJECT_DIR/.ccache" "$CCACHE_DIR"
    
    - |
      sudo \
        -u builder -H \
        --preserve-env=CI_COMMIT_TAG,CI_JOB_ID \
        bash -c "
          set -ex
          
          # Define paths from the builder's perspective
          BUILD_DIR='/home/builder/build'
          ARTIFACTS_DIR='/home/builder/artifacts'

          # Change to the new build directory
          cd \"\${BUILD_DIR}\"

          # Debug PKGBUILD parsing
          echo 'Debugging PKGBUILD...'
          pwd && ls -la
          echo '=== PKGBUILD content ==='
          head -20 PKGBUILD || echo 'PKGBUILD not found!'

          # Install package dependencies
          echo 'Installing package dependencies...'
          builder deps
          
          # Build the package
          echo 'Building package...'
          builder build

          # Generate version info into the temporary artifacts directory
          echo 'Generating version info...'
          builder version --output-file \"\${ARTIFACTS_DIR}/version.env\"
           
          # Validate the version.env file
          echo 'Validating version.env file:';
          cat \"\${ARTIFACTS_DIR}/version.env\";
          echo 'Testing source of version.env:';
          source \"\${ARTIFACTS_DIR}/version.env\" && echo 'version.env is valid';

          # Collect build artifacts into the temporary artifacts directory
          echo 'Collecting artifacts...'
          builder artifacts --output-dir \"\${ARTIFACTS_DIR}\"
        "
    
    - echo "Moving artifacts to the final location..."
    - mv "$BUILD_ARTIFACTS_DIR"/* "$CI_PROJECT_DIR/$ARTIFACTS_DIR/"

    # Validate version.env before using it
    - echo "Validating version.env file:"
    - cat "$ARTIFACTS_DIR/version.env"
    - echo "Testing source of version.env:"
    - source "$ARTIFACTS_DIR/version.env" && echo "version.env is valid"

    # List the generated artifacts for logging purposes.
    - echo 'Build artifacts:'
    - ls -la $ARTIFACTS_DIR/

  artifacts:
    paths:
      - $ARTIFACTS_DIR/
    expire_in: 1 week
    reports:
      dotenv: $ARTIFACTS_DIR/version.env

# Create a GitLab release and attach the built package as an asset.
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_package
      artifacts: true
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      set -e
      
      # Validate version.env exists and is readable
      if [[ ! -f "$ARTIFACTS_DIR/version.env" ]]; then
        echo "ERROR: version.env not found!"
        exit 1
      fi
      
      echo "Contents of version.env:"
      cat "$ARTIFACTS_DIR/version.env"
      
      # Source the version file with validation
      echo "Sourcing version.env..."
      source "$ARTIFACTS_DIR/version.env"
      
      # Validate required variables
      if [[ -z "$FULL_VERSION" || -z "$PACKAGE_NAME" || -z "$ARCH" ]]; then
        echo "ERROR: Missing required variables in version.env"
        echo "FULL_VERSION: $FULL_VERSION"
        echo "PACKAGE_NAME: $PACKAGE_NAME"
        echo "ARCH: $ARCH"
        exit 1
      fi
      
      echo "Creating release for version: $FULL_VERSION"
      
      DESCRIPTION="## Package Information
      
      - **Package Name:** $PACKAGE_NAME
      - **Version:** $FULL_VERSION  
      - **Architecture:** $ARCH
      - **Build Date:** $BUILD_DATE
      - **Build Job:** [$BUILD_JOB_ID]($CI_PROJECT_URL/-/jobs/$BUILD_JOB_ID)
      
      ## Files in this release"
      
      ASSET_ARGS=""
      for file in "$ARTIFACTS_DIR"/*.pkg.tar.*; do
        if [[ -f "$file" ]]; then
          filename=$(basename "$file")
          echo "Adding asset: $filename"
          ASSET_ARGS="$ASSET_ARGS --assets-link '{\"name\":\"$filename\",\"url\":\"$CI_PROJECT_URL/-/jobs/$BUILD_JOB_ID/artifacts/raw/$ARTIFACTS_DIR/$filename\",\"link_type\":\"package\",\"filepath\":\"/$filename\"}'"
          DESCRIPTION="$DESCRIPTION
      - ðŸ“¦ [$filename]($CI_PROJECT_URL/-/jobs/$BUILD_JOB_ID/artifacts/raw/$ARTIFACTS_DIR/$filename)"
        fi
      done
      
      for file in "$ARTIFACTS_DIR"/{PKGBUILD,*.log}; do
        if [[ -f "$file" ]]; then
          filename=$(basename "$file")
          ASSET_ARGS="$ASSET_ARGS --assets-link '{\"name\":\"$filename\",\"url\":\"$CI_PROJECT_URL/-/jobs/$BUILD_JOB_ID/artifacts/raw/$ARTIFACTS_DIR/$filename\",\"link_type\":\"other\",\"filepath\":\"/$filename\"}'"
          DESCRIPTION="$DESCRIPTION
      - ðŸ“„ [$filename]($CI_PROJECT_URL/-/jobs/$BUILD_JOB_ID/artifacts/raw/$ARTIFACTS_DIR/$filename)"
        fi
      done
      
      if [[ -z "$ASSET_ARGS" ]]; then
        echo "No package files found in artifacts!"
        exit 1
      fi
      
      eval "release-cli create \
        --name 'Release $TAG_VERSION' \
        --tag-name '$CI_COMMIT_TAG' \
        --description '$DESCRIPTION' \
        $ASSET_ARGS"
